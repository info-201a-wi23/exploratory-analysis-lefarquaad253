panel.border = element_blank(), # remove border around plot
)
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group))
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group))
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
# Then map National Park locations as points on top
ggplot(data = park_loations
mapping = aes(
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
# Then map National Park locations as points on top
ggplot(data = park_loations,
mapping = aes(
x=long,
y=lat,
))
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
# Map National Park locations as points
geom_point(data = park_locations,
aes(x = long,
y = lat),
color = "red") +
coord_map()
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
# Map National Park locations as points
geom_point(data = park_locations,
aes(x = long,
y = lat),
color = "red") +
coord_map() +
blank_theme()
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
# Map National Park locations as points
geom_point(data = park_locations,
aes(x = long,
y = lat),
color = "red") +
coord_map() +
blank_theme
# Load data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
View(np_data)
# Load state shapefile
state_shape <- map_data("state")
# Add full (lowercased) state name to np_data, matching on state abbreviation
np_data <- np_data %>%
mutate(state_fullname =
tolower(state.name[match(State, state.abb)]))
View(np_data)
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data -> np_data %>%
group_by(state_fullname) %>%
summarize(total_visits = sum(RecreationVisits, na.rm=T))
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>%
group_by(state_fullname) %>%
summarize(total_visits = sum(RecreationVisits, na.rm=T))
View(np_state_data)
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- state_shape %>%
left_join(np_state_data, by = c("region" = "state_fullname"))
View(np_state_shape_data)
View(np_state_shape_data)
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = total_visits)) +
coord_map() +
labs(title = 'National Park Visits', fill = 'Visits')
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# source all R files
# source('sum_info.R')
# source('agg_table.R')
# source('map.R')
# load necessary library: dplyr, ggplot2
library(dplyr)
library(ggplot2)
library("scales")
# load states dataframe into variable `covid` and filter for most recent data
covid <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = FALSE) %>%
filter(date == max(date, na.rm=T))
# 1. Load state shapefile into `state_shape`
state_shape <- map_data("state")
View(covid)
View(covid)
# 2. Make the `covid` dataframe's `state` column lowercase.
# HINT: Use `mutate()` and name your mutated column "state" -- this will replace
# values instead of creating a new column.
covid <- covid %>% mutate(state = tolower(state))
View(covid)
View(covid)
View(state_shape)
View(state_shape)
# 3. Join `covid` and `state_shape` in a variable called `covid_state_shape` on
# the state column.
# HINT: The state columns have different names in the 2 different dataframes.
covid_state_shape <- left_join(covid, state_shape by = c("region"= "state"))
# 3. Join `covid` and `state_shape` in a variable called `covid_state_shape` on
# the state column.
# HINT: The state columns have different names in the 2 different dataframes.
covid_state_shape <- left_join(covid, state_shape, by = c("region"= "state"))
# 3. Join `covid` and `state_shape` in a variable called `covid_state_shape` on
# the state column.
# HINT: The state columns have different names in the 2 different dataframes.
covid_state_shape <- covid %>% left_join(state_shape, by = c("region"= "state"))
# 3. Join `covid` and `state_shape` in a variable called `covid_state_shape` on
# the state column.
# HINT: The state columns have different names in the 2 different dataframes.
covid_state_shape <- covid %>% left_join(state_shape, by = c("state"= "region"))
View(covid_state_shape)
# Let's create a blank theme that we'll add to our map later:
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# 4. Now, make a map using the joined `covid_state_shape` dataframe, where the
# fill is based on the number of cases in each state. Store this in a variable
# called `cases_map`
cases_map <- ggplot(data = covid_state_shape) +
geom_polygon(mapping = aes(x=long,
y=lat,
group=group,
fill=cases)) +
# Now let's make your map more readable:
# 5. Represent low values with grey and high values with red. Add abbreviations
# for millions with `label_number_si()` for the labels.
scale_fill_continuous(low = "grey",
high = "red",
labels = "YOUR_ANSWER") +
# 6. Add a map title and a legend title using labs().
labs(title="YOUR_ANSWER",
fill="YOUR_ANSWER") +
# 7. Add coord_map() to prevent stretching
# coord_map() +
# 8. Add blank_theme to remove distracting lines
# blank_theme
# cases_map # test your map by running this line of code
# 9. Make another map `deaths_map` that shows number of deaths by state. Make
# the following changes:
# a. Change the fill value to `deaths` in `aes()`
# b. Change the high value color to blue in `scale_fill_continuous`
# c. Update the labels to say "Deaths" instead of "Cases" in `labs()`
deaths_map <-
cases_map <- ggplot(data = covid_state_shape) +
geom_polygon(mapping = aes(x=long,
y=lat,
group=group,
fill=cases))
View(cases_map)
View(cases_map)
View(cases_map)
# 4. Now, make a map using the joined `covid_state_shape` dataframe, where the
# fill is based on the number of cases in each state. Store this in a variable
# called `cases_map`
cases_map <- ggplot(data = covid_state_shape) +
geom_polygon(mapping = aes(x=long,
y=lat,
group=group,
fill=cases)) +
# Now let's make your map more readable:
# 5. Represent low values with grey and high values with red. Add abbreviations
# for millions with `label_number_si()` for the labels.
scale_fill_continuous(low = "grey",
high = "red",
labels = "YOUR_ANSWER") +
# 6. Add a map title and a legend title using labs().
labs(title="YOUR_ANSWER",
fill="YOUR_ANSWER") +
# 7. Add coord_map() to prevent stretching
# coord_map() +
# 8. Add blank_theme to remove distracting lines
# blank_theme
# cases_map # test your map by running this line of code
# 9. Make another map `deaths_map` that shows number of deaths by state. Make
# the following changes:
# a. Change the fill value to `deaths` in `aes()`
# b. Change the high value color to blue in `scale_fill_continuous`
# c. Update the labels to say "Deaths" instead of "Cases" in `labs()`
deaths_map <-
# 4. Now, make a map using the joined `covid_state_shape` dataframe, where the
# fill is based on the number of cases in each state. Store this in a variable
# called `cases_map`
cases_map <- ggplot(data = covid_state_shape) +
geom_polygon(mapping = aes(x=long,
y=lat,
group=group,
fill=cases)) +
# Now let's make your map more readable:
# 5. Represent low values with grey and high values with red. Add abbreviations
# for millions with `label_number_si()` for the labels.
scale_fill_continuous(low = "grey",
high = "red",
labels = label_number_si()) +
# 6. Add a map title and a legend title using labs().
labs(title="YOUR_ANSWER",
fill="YOUR_ANSWER") +
# 7. Add coord_map() to prevent stretching
# coord_map() +
# 8. Add blank_theme to remove distracting lines
# blank_theme
# cases_map # test your map by running this line of code
# 9. Make another map `deaths_map` that shows number of deaths by state. Make
# the following changes:
# a. Change the fill value to `deaths` in `aes()`
# b. Change the high value color to blue in `scale_fill_continuous`
# c. Update the labels to say "Deaths" instead of "Cases" in `labs()`
deaths_map <-
# 4. Now, make a map using the joined `covid_state_shape` dataframe, where the
# fill is based on the number of cases in each state. Store this in a variable
# called `cases_map`
cases_map <- ggplot(data = covid_state_shape) +
geom_polygon(mapping = aes(x=long,
y=lat,
group=group,
fill=cases)) +
# Now let's make your map more readable:
# 5. Represent low values with grey and high values with red. Add abbreviations
# for millions with `label_number_si()` for the labels.
scale_fill_continuous(low = "grey",
high = "red",
labels = label_number_si()) +
# 6. Add a map title and a legend title using labs().
labs(title="YOUR_ANSWER",
fill="YOUR_ANSWER") +
# 7. Add coord_map() to prevent stretching
# coord_map() +
# 8. Add blank_theme to remove distracting lines
# blank_theme
# cases_map # test your map by running this line of code
# 9. Make another map `deaths_map` that shows number of deaths by state. Make
# the following changes:
# a. Change the fill value to `deaths` in `aes()`
# b. Change the high value color to blue in `scale_fill_continuous`
# c. Update the labels to say "Deaths" instead of "Cases" in `labs()`
deaths_map <-
# 4. Now, make a map using the joined `covid_state_shape` dataframe, where the
# fill is based on the number of cases in each state. Store this in a variable
# called `cases_map`
cases_map <- ggplot(data = covid_state_shape) +
geom_polygon(mapping = aes(x=long,
y=lat,
group=group,
fill=cases)) +
# Now let's make your map more readable:
# 5. Represent low values with grey and high values with red. Add abbreviations
# for millions with `label_number_si()` for the labels.
scale_fill_continuous(low = "grey",
high = "red",
labels = "label_number_si()") +
# 6. Add a map title and a legend title using labs().
labs(title="YOUR_ANSWER",
fill="YOUR_ANSWER") +
# 7. Add coord_map() to prevent stretching
# coord_map() +
# 8. Add blank_theme to remove distracting lines
# blank_theme
# cases_map # test your map by running this line of code
# 9. Make another map `deaths_map` that shows number of deaths by state. Make
# the following changes:
# a. Change the fill value to `deaths` in `aes()`
# b. Change the high value color to blue in `scale_fill_continuous`
# c. Update the labels to say "Deaths" instead of "Cases" in `labs()`
deaths_map <-
# 4. Now, make a map using the joined `covid_state_shape` dataframe, where the
# fill is based on the number of cases in each state. Store this in a variable
# called `cases_map`
cases_map <- ggplot(data = covid_state_shape) +
geom_polygon(mapping = aes(x=long,
y=lat,
group=group,
fill=cases)) +
# Now let's make your map more readable:
# 5. Represent low values with grey and high values with red. Add abbreviations
# for millions with `label_number_si()` for the labels.
scale_fill_continuous(low = "grey",
high = "red")
# 4. Now, make a map using the joined `covid_state_shape` dataframe, where the
# fill is based on the number of cases in each state. Store this in a variable
# called `cases_map`
cases_map <- ggplot(data = covid_state_shape) +
geom_polygon(mapping = aes(x=long,
y=lat,
group=group,
fill=cases))
cases_map # test your map by running this line of code
cases_map <- ggplot(data = covid_state_shape) +
geom_polygon(mapping = aes(x=long,
y=lat,
group=group,
fill=cases)) +
# Now let's make your map more readable:
# 5. Represent low values with grey and high values with red. Add abbreviations
# for millions with `label_number_si()` for the labels.
scale_fill_continuous(low = "grey",
high = "red") +
labels =label_number_si())
cases_map <- ggplot(data = covid_state_shape) +
geom_polygon(mapping = aes(x=long,
y=lat,
group=group,
fill=cases)) +
# Now let's make your map more readable:
# 5. Represent low values with grey and high values with red. Add abbreviations
# for millions with `label_number_si()` for the labels.
scale_fill_continuous(low = "grey",
high = "red") +
labels =label_number_si()
cases_map
# Get the following values for our report:
# 1. The most recent date in the data
recent_date <- covid %>%
slice_max(date, with_ties=F) %>%
pull(date)
# 2. The lowest number of cases on the most recent date
low_cases <- covid %>%
filter(cases == min(cases, na.rm=T)) %>%
pull(cases)
# 3. The state with the lowest number of cases on the most recent date
state_low_cases <- covid %>%
filter(cases == min(cases, na.rm=T)) %>%
pull(state)
# 4. Now add all variables into a summary info list:
sum_info <- list()
sum_info$recent_date <- recent_date
sum_info$low_cases <- low_cases
sum_info$state_low_cases <- state_low_cases
View(sum_info)
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# source all R files
source('sum_info.R')
source('agg_table.R')
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# source all R files
source('sum_info.R')
source('agg_table.R')
source('map.R')
read.csv("https://github.com/the-pudding/data/tree/master/dog-shelters")
read.csv("https://github.com/the-pudding/data/blob/master/dog-shelters/allDogDescriptions.csv")
read.csv("https://github.com/the-pudding/data/blob/master/dog-shelters/allDogDescriptions.csv", StringAsFactor = TRUE)
data <- read.csv("https://github.com/the-pudding/data/blob/master/dog-shelters/allDogDescriptions.csv", StringAsFactor = TRUE)
data <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dog-shelters/allDogDescriptions.csv", StringAsFactor = TRUE)
library(stringr)
data <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dog-shelters/allDogDescriptions.csv", StringAsFactor = TRUE)
data <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dog-shelters/allDogDescriptions.csv", StringAsFactor = FALSE)
data <- read.csv("https://github.com/the-pudding/data/blob/master/dog-shelters/allDogDescriptions.csv", StringAsFactor = FALSE)
data <- read.csv("https://github.com/the-pudding/data/blob/master/dog-shelters/allDogDescriptions.csv", StringAsFactor = FALSE)
data <- read.csv("https://github.com/the-pudding/data/blob/master/dog-shelters/allDogDescriptions.csv", StringAsFactor = TRUE)
data <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dog-shelters/allDogDescriptions.csv", StringAsFactor = TRUE)
library(readr)
allDogDescriptions <- read_csv("~/Desktop/allDogDescriptions.csv")
View(allDogDescriptions)
library(readr)
View(allDogDescriptions)
View(allDogDescriptions)
View(allDogDescriptions)
data <- read.csv("https://github.com/the-pudding/data/blob/master/dog-shelters/allDogDescriptions.csv")
View(data)
View(data)
data <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dog-shelters/allDogDescriptions.csv")
data <- read.csv("https://raw.githubusercontent.com/the-pudding/data/master/dog-shelters/allDogDescriptions.csv", StringAsFactor=TRUE)
allDogDescriptions <- read.csv("~/Desktop/allDogDescriptions.csv")
allDogDescriptions <- read.csv("~/Desktop/allDogDescriptions.csv")
View(allDogDescriptions)
View(allDogDescriptions)
setwd("/Users/stlp/Desktop/info-201/exploratory-analysis-lefarquaad253")
allDogDescriptions <- read.csv("allDogDescriptions")
View(allDogDescriptions)
allDogDescriptions <- read.csv("allDogDescriptions")
allDogDescriptions <- read.csv("allDogDescriptions.csv")
View(allDogDescriptions)
View(allDogDescriptions)
View(allDogDescriptions)
unique(ages)
ggplot(df_color)+
geom_col(aes(x = reorder(color_primary, count), y = count, fill= color_primary))
df_color <- allDogDescriptions %>%
group_by(color_primary) %>%
summarize(count = n())
library("dplyr")
library("stringr")
library("ggplot2")
library("scales")
allDogDescriptions <- read.csv("allDogDescriptions.csv", stringsAsFactors = TRUE)
unique(allDogDescriptions$color_primary)
df_color <- allDogDescriptions %>%
group_by(color_primary) %>%
summarize(count = n())
df_color <-df_color[-16,]
ggplot(df_color)+
geom_col(aes(x = reorder(color_primary, count), y = count, fill= color_primary))
View(df_color)
View(df_color)
df_color[df_color == "Apricot / Beige"] <- "Apricot"
df = df.replace('Apricot / Beige','Apricot', regex=True)
install.packages ("pandas")
df_color$color_primary[df_color$color_primary == 'Apricot / Beige'] <- 'Apricot'
colors <- c("Apricot", "Bicolor", "Black", "Brindle", "Brown", "Golden", "Gray", "Harlequin","Merle (Blue)", "Merle (Red)","Red", "Sable", "Tricolor", "White", "Yellow")
df1 <- cbind(colors, df_color$count)
df1 <- cbind(as.data.frame(colors, df_color$count))
count <- df_color$count
cbind(colors, count)
df1 <- cbind(colors, count)
View(df1)
View(df1)
View(df1)
View(df_color)
View(df1)
df1 <- data.frame(colors, count)
ggplot(df1)+
geom_col(aes(x = reorder(color, count), y = count, fill= color))
ggplot(df1)+
geom_col(aes(x = reorder(colors, count), y = count, fill= colors))
ggplot(df1)+
geom_col(aes(x = reorder(colors, count), y = count, fill= colors))+
labs(x = "Primary Color", y = "Count", Title = "A Bar Chart showing the distribution of dogs by Color")
ggplot(df1)+
geom_col(aes(x = reorder(colors, count), y = count, fill= colors))+
labs(x = "Primary Color", y = "Count", title = "A Bar Chart showing the distribution of dogs by Color")
ggplot(df1)+
geom_col(aes(x = reorder(colors, count), y = count, fill= colors))+
labs(x = "Primary Color", y = "Count", title = "A Bar Chart showing the Distribution of Dogs by their Primary Color")
allDogDescriptions <- read.csv("allDogDescriptions.csv", stringsAsFactors = TRUE)
unique(allDogDescriptions$color_primary)
df_color <- allDogDescriptions %>%
group_by(color_primary) %>%
summarize(count = n())
allDogDescriptions <- read.csv("allDogDescriptions.csv", stringsAsFactors = TRUE)
View(allDogDescriptions)
df_color <- allDogDescriptions %>%
group_by(color_primary) %>%
summarize(count = n())
library("dplyr")
library("stringr")
library("ggplot2")
library("scales")
allDogDescriptions <- read.csv("allDogDescriptions.csv", stringsAsFactors = TRUE)
unique(allDogDescriptions$color_primary)
df_color <- allDogDescriptions %>%
group_by(color_primary) %>%
summarize(count = n())
df_color <-df_color[-16,]
colors <- c("Apricot", "Bicolor", "Black", "Brindle", "Brown", "Golden", "Gray", "Harlequin","Merle (Blue)", "Merle (Red)","Red", "Sable", "Tricolor", "White", "Yellow")
count <- df_color$count
df1 <- data.frame(colors, count)
bar_chart <- ggplot(df1)+
geom_col(aes(x = reorder(colors, count), y = count, fill= colors))+
labs(x = "Primary Color", y = "Count", title = "A Bar Chart showing the Distribution of Dogs by their Primary Color")
bar_chart
bar_chart
bar_chart
bar_chart
bar_chart
