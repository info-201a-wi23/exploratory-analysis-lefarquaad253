# Install libraries
install.packages("plotly")
# Load libraries
library("dplyr")
library("ggplot")
install.packages("ggplot")
library("ggplot")
library("plotly")
library("ggplot2")
library("plotly")
# Load data
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/maternity-leave-2021.csv
# Original data from The World Bank
# https://genderdata.worldbank.org/indicators/sh-leve/?view=bar
maternity_df <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/maternity-leave-2021.csv",  stringsAsFactors = TRUE)
View(maternity_df)
View(maternity_df)
# Exercise 1: Filter for the United States, Bulgaria, and Italy
selected_df <- maternity_df %>%
# Exercise 1: Filter for the United States, Bulgaria, and Italy
selected_df <- maternity_df %>%
filter(Country.Name%in% c("United States", "Bulgaria", "Italy"))
selected_df <- maternity_df %>%
filter(Country.Name %in% c("United States", "Bulgaria", "Italy"))
# Exercise 2: Make a bar plot of countries on the y axis and number of days paid maternity leave on the x axis
maternity_plot <- ggplot(selected_df)+
geom_col(aes(x=Value, y= Country.Name, fill=Country.Name))
maternity_plot
# Exercise 2: Make a bar plot of countries on the y axis and number of days paid maternity leave on the x axis
maternity_plot <- ggplot(selected_df)+
geom_col(aes(x=Value, y= Country.Name, fill=Country.Name, text = paste("Country:", Country.Name)))
# Exercise 3: Make the plot interactive
ggplotly(maternity_plot, tooltip = "text")
install.packages("shiny")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
rm(list = ls())
df <- read.csv("allDogDescriptions.csv")
df$sex <- toupper(df$sex)
df$sex[grep("\\bM\\b", df$sex)] <- 'MALE'
df$sex[grep("\\bF\\b", df$sex)] <- 'FEMALE'
keep_sex <- c("MALE", "FEMALE")
df <- df[df$sex %in% keep_sex, ]
df <-
df %>%
group_by(contact_state) %>%
filter(contact_state == "Washington") %>%
subset(select = c(age, sex, contact_state))
mostCommon <-
df %>%
count(contact_state, sort = TRUE)
keep_state <- as.vector(unlist(mostCommon$contact_state))[1:10]
df <- df[df$contact_state %in% keep_state, ]
bar_chart
bar_chart
bar_chart <- ggplot(df1)+
geom_col(aes(x = reorder(colors, count), y = count, fill= colors))+
labs(x = "Primary Color", y = "Count", title = "A Bar Chart showing the Distribution of Dogs by their Primary Color")
library("dplyr")
library("stringr")
library("ggplot2")
library("scales")
allDogDescriptions <- read.csv("allDogDescriptions.csv", stringsAsFactors = TRUE)
unique(allDogDescriptions$color_primary)
df_color <- allDogDescriptions %>%
group_by(color_primary) %>%
summarize(count = n())
allDogDescriptions <- read.csv("allDogDescriptions.csv", stringsAsFactors = TRUE)
setwd("/Users/stlp/Desktop/info-201/exploratory-analysis-lefarquaad253")
allDogDescriptions <- read.csv("allDogDescriptions.csv", stringsAsFactors = TRUE)
unique(allDogDescriptions$color_primary)
df_color <- allDogDescriptions %>%
group_by(color_primary) %>%
summarize(count = n())
df_color <-df_color[-16,]
colors <- c("Apricot", "Bicolor", "Black", "Brindle", "Brown", "Golden", "Gray", "Harlequin","Merle (Blue)", "Merle (Red)","Red", "Sable", "Tricolor", "White", "Yellow")
count <- df_color$count
df1 <- data.frame(colors, count)
bar_chart <- ggplot(df1)+
geom_col(aes(x = reorder(colors, count), y = count, fill= colors))+
labs(x = "Primary Color", y = "Count", title = "A Bar Chart showing the Distribution of Dogs by their Primary Color")
bar_chart
# Load data
allDogDescriptions <- read.csv("allDogDescriptions.csv", stringsAsFactors = TRUE)
# Load state shapefile
state_shape <- map_data("state")
View(state_shape)
# Add full (lowercased) state name to allDogDescriptions, matching on state abbreviation
allDogDescriptions <- allDogDescriptions %>%
mutate(state_fullname =
tolower(state.name[match(contact_state, state.abb)]))
# Make a new dataframe of the total adoptable dogs for each state (by full name)
adoption_data <- allDogDescriptions %>%
group_by(state_fullname) %>%
summarize(state_total = n()) %>%
drop_na(state_fullname)
# Join the `state_shape` and `allDogsDescriptions` dataframes as
# state_shape_data
state_shape_data <- left_join(state_shape,
adoption_data,
by = c("region" = "state_fullname"))
# Make a choropleth map of amount of adoptable dogs by state
ggplot(state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = state_total)) +
coord_map() +
labs(title = 'Distribution of Adoptable Dogs in the United States on September 20, 2019', fill = 'Amount of Dogs') +
blank_theme
# To make a blank theme, you can create custom theme like so, and then add it to the bottom of your ggplot
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
#Load libraries
library("ggplot2")
library("maps")
library("dplyr")
library("plotly")
library("stringr")
library("tidyverse")
# Load data
allDogDescriptions <- read.csv("allDogDescriptions.csv", stringsAsFactors = TRUE)
# Load state shapefile
state_shape <- map_data("state")
View(state_shape)
View(state_shape)
# Add full (lowercased) state name to allDogDescriptions, matching on state abbreviation
allDogDescriptions <- allDogDescriptions %>%
mutate(state_fullname =
tolower(state.name[match(contact_state, state.abb)]))
# Make a new dataframe of the total adoptable dogs for each state (by full name)
adoption_data <- allDogDescriptions %>%
group_by(state_fullname) %>%
summarize(state_total = n()) %>%
drop_na(state_fullname)
# Join the `state_shape` and `allDogsDescriptions` dataframes as
# state_shape_data
state_shape_data <- left_join(state_shape,
adoption_data,
by = c("region" = "state_fullname"))
# Join the `state_shape` and `allDogsDescriptions` dataframes as
# state_shape_data
state_shape_data <- left_join(state_shape,
adoption_data,
by = c("region" = "state_fullname"))
library("dplyr")
library("tidyverse")
# Add full (lowercased) state name to allDogDescriptions, matching on state abbreviation
allDogDescriptions <- allDogDescriptions %>%
mutate(state_fullname =
tolower(state.name[match(contact_state, state.abb)]))
# Make a new dataframe of the total adoptable dogs for each state (by full name)
adoption_data <- allDogDescriptions %>%
group_by(state_fullname) %>%
summarize(state_total = n()) %>%
drop_na(state_fullname)
# Join the `state_shape` and `allDogsDescriptions` dataframes as
# state_shape_data
state_shape_data <- left_join(state_shape,
adoption_data,
by = c("region" = "state_fullname"))
library(dplyr)
library(dplyr)
